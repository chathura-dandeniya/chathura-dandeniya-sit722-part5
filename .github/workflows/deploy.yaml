name: Deploy Library Microservice

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main  # Restrict deployments to the main branch
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_LOG: DEBUG  # Enable detailed logs for Terraform

    steps:
      # Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Azure Login Step
      - name: Azure Login
        uses: azure/login@v1.4.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Terraform Init to initialize working directory
      - name: Terraform Init
        run: terraform init

      - name: Export Environment Variables for Terraform
        run: |
          echo "TF_VAR_ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV

      - name: Terraform Plan to generate and capture the infrastructure plan
        id: tf_plan
        run: terraform plan -out=tfplan -var="ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" -var="ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" -var="ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" -var="ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}"

        continue-on-error: false  # Fails if the plan encounters an error


      # Capture Terraform Outputs
      - name: Capture Terraform Outputs
        id: tf_output
        run: |
          echo "::set-output name=registry_username::$(terraform output -raw registry_username)"
          echo "::set-output name=registry_password::$(terraform output -raw registry_password)"
          echo "::set-output name=registry_login_server::$(terraform output -raw registry_login_server)"
        continue-on-error: false  # Fails if output capture fails

      # Set environment variables dynamically based on Terraform outputs
      - name: Set Container Registry Environment Variables
        run: |
          echo "Setting container registry environment variables..."
          echo "CONTAINER_REGISTRY=${{ steps.tf_output.outputs.registry_login_server }}" >> $GITHUB_ENV
          echo "REGISTRY_UN=${{ steps.tf_output.outputs.registry_username }}" >> $GITHUB_ENV
          echo "REGISTRY_PW=${{ steps.tf_output.outputs.registry_password }}" >> $GITHUB_ENV

      # Build the Docker image
      - name: Build Docker Image
        run: ./scripts/build-image.sh
        continue-on-error: false  # Fails if the build process fails

      # Publish the Docker image to the container registry
      - name: Publish Docker Image
        run: ./scripts/push-image.sh
        continue-on-error: false  # Fails if the push fails

      # Install kubectl and configure access to Kubernetes cluster
      - name: Install kubectl and Configure Cluster Access
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
          kubectl-version: v1.30.2

      # Verify Kubernetes API access
      - name: Check Kubernetes Cluster Status
        run: kubectl cluster-info
        continue-on-error: false  # Fails if cluster info can't be fetched

      # Deploy the microservice to Kubernetes
      - name: Deploy Microservice
        run: ./scripts/deploy.sh
        continue-on-error: false  # Fails if the deployment fails

      # Optional: Cleanup (commented out, can be used if needed)
      #- name: Delete resources
      #  run: ./scripts/delete.sh
